// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String    @unique
  password      String
  name          String?
  avatar        String?
  isActive      Boolean   @default(true)
  isPremium     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // 关联关系
  memoryContents MemoryContent[]
  activationCodes ActivationCode[]
  reviews        Review[]
  gamificationProfile GamificationProfile?
  points         Point[]
  userChallenges UserChallenge[]
  userAchievements UserAchievement[] @relation("UserAchievementsUser")
  pointTransactions PointTransaction[] @relation("PointTransactionsUser")
  userDailyChallenges UserDailyChallenge[] @relation("UserDailyChallengesUser")
  leaderboardEntries LeaderboardEntry[] @relation("LeaderboardEntriesUser")
  userBehaviorEvents UserBehaviorEvent[] @relation("UserBehaviorEventsUser")
  abTestAssignments ABTestUserAssignment[]
  createdAbTestTemplates ABTestTemplate[] @relation("ABTestTemplatesCreator")
  createdABSegments ABSegment[] @relation("ABSegmentsCreator")
  abSegments ABSegmentUser[]
  userRewards UserReward[] @relation("UserRewardsUser")
  personalizedConfig PersonalizedConfig?
  userTutorialProgress UserTutorialProgress[] // 用户教程进度
  tutorialFeedback TutorialFeedback[] // 教程反馈
  socialShares SocialShare[] // 社交分享记录
   
  @@map("users")
}

// 激活码模型
model ActivationCode {
  id        String   @id @default(cuid())
  code      String   @unique
  type      ActivationCodeType
  status    ActivationCodeStatus @default(AVAILABLE)
  userId    String?
  expiresAt DateTime?
  usedAt    DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联关系
  user User? @relation(fields: [userId], references: [id])
  
  @@map("activation_codes")
}

// 记忆内容模型
model MemoryContent {
  id          String      @id @default(cuid())
  title       String
  content     String
  category    String      @default("default")
  tags        String[]
  difficulty  Int         @default(1) // 1-5 难度等级
  priority    Int         @default(3) // 1-5 优先级
  status      MemoryStatus @default(ACTIVE)
  startTime   DateTime?
  userId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // 关联关系
  user    User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews Review[]
  
  @@map("memory_contents")
}

// 复习记录模型
model Review {
  id           String     @id @default(cuid())
  cycleNumber  Int        // 第几次复习 (1-9 对应艾宾浩斯曲线的9个时间点)
  reviewTime   DateTime   @default(now())
  isCompleted  Boolean    @default(false)
  reviewScore  Int?       // 复习得分 1-5
  notes        String?
  nextReviewAt DateTime?
  userId       String
  memoryContentId String
  
  // 关联关系
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  memoryContent MemoryContent @relation(fields: [memoryContentId], references: [id], onDelete: Cascade)
  
  @@map("reviews")
}

// 枚举定义
enum ActivationCodeType {
  PREMIUM_MONTH
  PREMIUM_YEAR
  LIFETIME
  TRIAL
}

enum ActivationCodeStatus {
  AVAILABLE
  USED
  EXPIRED
  CANCELLED
}

enum MemoryStatus {
  ACTIVE
  COMPLETED
  PAUSED
  ARCHIVED
}

// 游戏化相关模型
// 游戏化资料模型
model GamificationProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  level     Int      @default(1) // 用户等级
  points    Int      @default(0) // 积分
  experience Int     @default(0) // 经验值
  streak    Int      @default(0) // 连续学习天数
  lastActiveAt DateTime @default(now()) // 最后活跃时间
  
  // 关联关系
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievements UserAchievement[] @relation("UserAchievementsProfile")
  pointTransactions PointTransaction[] @relation("PointTransactionsProfile")
  dailyChallenges UserDailyChallenge[] @relation("UserDailyChallengesProfile")
  leaderboardEntries LeaderboardEntry[] @relation("LeaderboardEntriesProfile")
  learningStyle UserLearningStyle? // 学习风格分析结果
  
  @@map("gamification_profiles")
}

// 学习风格枚举
enum LearningStyleType {
  VISUAL      // 视觉型
  AUDITORY    // 听觉型
  KINESTHETIC // 动觉型
  READING     // 阅读型
  MIXED       // 混合型
}

// 学习风格分析模型
model UserLearningStyle {
  id        String   @id @default(cuid())
  userId    String   @unique
  primaryStyle   LearningStyleType  // 主要学习风格
  secondaryStyle LearningStyleType? // 次要学习风格
  visualScore   Int     @default(0) // 视觉学习倾向分数 (0-100)
  auditoryScore Int     @default(0) // 听觉学习倾向分数 (0-100)
  kinestheticScore Int @default(0) // 动觉学习倾向分数 (0-100)
  readingScore  Int     @default(0) // 阅读学习倾向分数 (0-100)
  lastAnalyzedAt DateTime @default(now()) // 最后分析时间
  dataPoints    Int      @default(0) // 分析数据点数量
  
  // 关联关系
  profile GamificationProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  
  @@map("user_learning_styles")
}

// 成就模型
model Achievement {
  id          String           @id @default(cuid())
  name        String           // 成就名称
  description String           // 成就描述
  icon        String?          // 成就图标
  category    String           // 成就类别
  type        AchievementType  // 成就类型
  points      Int              @default(0) // 获得的积分
  condition   String           // 获得条件描述
  isActive    Boolean          @default(true)
  
  // 关联关系
  userAchievements UserAchievement[] @relation("UserAchievementsAchievement")
  
  @@map("achievements")
}

// 用户成就模型
model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  progress      Int         @default(0) // 成就进度 (0-100)
  
  // 关联关系
  user        User        @relation("UserAchievementsUser", fields: [userId], references: [id], onDelete: Cascade, map: "user_achievements_user_id_fkey")
  achievement Achievement @relation("UserAchievementsAchievement", fields: [achievementId], references: [id], onDelete: Cascade, map: "user_achievements_achievement_id_fkey")
  profile     GamificationProfile @relation("UserAchievementsProfile", fields: [userId], references: [userId], onDelete: Cascade, map: "user_achievements_profile_id_fkey")
  
  @@unique([userId, achievementId])
  @@map("user_achievements")
}

// 积分交易模型
model PointTransaction {
  id          String            @id @default(cuid())
  userId      String
  amount      Int               // 积分变化量 (正数为增加，负数为减少)
  type        PointTransactionType // 交易类型
  description String            // 交易描述
  createdAt   DateTime          @default(now())
  
  // 关联关系
  user    User               @relation("PointTransactionsUser", fields: [userId], references: [id], onDelete: Cascade, map: "point_transactions_user_id_fkey")
  profile GamificationProfile @relation("PointTransactionsProfile", fields: [userId], references: [userId], onDelete: Cascade, map: "point_transactions_profile_id_fkey")
  
  @@map("point_transactions")
}

// 每日挑战模型
model DailyChallenge {
  id          String      @id @default(cuid())
  title       String      // 挑战标题
  description String      // 挑战描述
  type        ChallengeType // 挑战类型
  target      Int         // 目标值
  points      Int         @default(0) // 完成获得的积分
  isActive    Boolean     @default(true)
  date        DateTime    @default(now()) // 挑战日期
  
  // 关联关系
  userChallenges UserDailyChallenge[] @relation("UserDailyChallengesChallenge")
  
  @@map("daily_challenges")
}

// 用户每日挑战模型
model UserDailyChallenge {
  id           String         @id @default(cuid())
  userId       String
  challengeId  String
  progress     Int            @default(0) // 当前进度
  completed    Boolean        @default(false)
  completedAt  DateTime?
  claimed      Boolean        @default(false) // 是否已领取奖励
  
  // 关联关系
  user      User              @relation("UserDailyChallengesUser", fields: [userId], references: [id], onDelete: Cascade, map: "user_daily_challenges_user_id_fkey")
  challenge DailyChallenge    @relation("UserDailyChallengesChallenge", fields: [challengeId], references: [id], onDelete: Cascade, map: "user_daily_challenges_challenge_id_fkey")
  profile   GamificationProfile @relation("UserDailyChallengesProfile", fields: [userId], references: [userId], onDelete: Cascade, map: "user_daily_challenges_profile_id_fkey")
  
  @@unique([userId, challengeId])
  @@map("user_daily_challenges")
}

// 排行榜模型
model Leaderboard {
  id          String          @id @default(cuid())
  name        String          // 排行榜名称
  type        LeaderboardType // 排行榜类型
  period      LeaderboardPeriod // 排行榜周期
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  
  // 关联关系
  entries LeaderboardEntry[] @relation("LeaderboardEntriesLeaderboard")
  
  @@map("leaderboards")
}

// 排行榜条目模型
model LeaderboardEntry {
  id           String      @id @default(cuid())
  leaderboardId String
  userId       String
  rank         Int         // 排名
  score        Int         // 分数
  periodStart  DateTime    // 周期开始时间
  periodEnd    DateTime    // 周期结束时间
  createdAt    DateTime    @default(now())
  
  // 关联关系
  leaderboard Leaderboard          @relation("LeaderboardEntriesLeaderboard", fields: [leaderboardId], references: [id], onDelete: Cascade, map: "leaderboard_entries_leaderboard_id_fkey")
  user        User                 @relation("LeaderboardEntriesUser", fields: [userId], references: [id], onDelete: Cascade, map: "leaderboard_entries_user_id_fkey")
  profile     GamificationProfile  @relation("LeaderboardEntriesProfile", fields: [userId], references: [userId], onDelete: Cascade, map: "leaderboard_entries_profile_id_fkey")
  
  @@unique([leaderboardId, userId])
  @@map("leaderboard_entries")
}

// 积分模型
model Point {
  id        String    @id @default(cuid())
  userId    String
  amount    Int       // 积分数量
  type      PointType // 积分类型
  source    String?   // 积分来源
  createdAt DateTime  @default(now())
  
  // 关联关系
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("points")
}

// 挑战模型
model Challenge {
  id          String        @id @default(cuid())
  title       String        // 挑战标题
  description String        // 挑战描述
  type        ChallengeType // 挑战类型
  target      Int           // 目标值
  points      Int           @default(0) // 完成获得的积分
  startDate   DateTime      // 开始时间
  endDate     DateTime?     // 结束时间
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  
  // 关联关系
  userChallenges UserChallenge[]
  
  @@map("challenges")
}

// 用户挑战模型
model UserChallenge {
  id           String      @id @default(cuid())
  userId       String
  challengeId  String
  progress     Int         @default(0) // 当前进度
  completed    Boolean     @default(false)
  completedAt  DateTime?
  claimed      Boolean     @default(false) // 是否已领取奖励
  createdAt    DateTime    @default(now())
  
  // 关联关系
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge Challenge   @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  
  @@unique([userId, challengeId])
  @@map("user_challenges")
}

// 游戏化相关枚举
enum PointTransactionType {
  REVIEW_COMPLETED  // 完成复习
  CHALLENGE_COMPLETED // 完成挑战
  ACHIEVEMENT_UNLOCKED // 解锁成就
  STREAK_BONUS      // 连续学习奖励
  LEVEL_UP         // 升级奖励
  MANUAL_ADJUST    // 手动调整
}

enum ChallengeType {
  REVIEW_COUNT    // 复习次数
  REVIEW_ACCURACY // 复习准确率
  MEMORY_CREATED  // 创建记忆内容
  STREAK_DAYS     // 连续学习天数
  CATEGORY_FOCUS  // 特定类别复习
}

enum LeaderboardType {
  POINTS         // 积分榜
  LEVEL          // 等级榜
  STREAK         // 连续学习榜
  REVIEW_COUNT   // 复习次数榜
  ACCURACY       // 准确率榜
}

enum LeaderboardPeriod {
  DAILY          // 每日
  WEEKLY         // 每周
  MONTHLY        // 每月
  ALL_TIME       // 总榜
}

// 新增游戏化相关枚举
enum AchievementType {
  MILESTONE      // 里程碑成就
  PROGRESS       // 进度成就
  SPECIAL        // 特殊成就
  HIDDEN         // 隐藏成就
}

enum PointType {
  EARNED         // 获得的积分
  SPENT          // 消费的积分
  BONUS          // 奖励积分
  PENALTY        // 惩罚积分
}

// 用户行为事件类型枚举
enum UserBehaviorEventType {
  REVIEW_COMPLETED     // 完成复习
  MEMORY_CREATED       // 创建记忆内容
  CATEGORY_FOCUS       // 专注特定类别
  TIME_SPENT           // 学习时间
  ACCURACY_HIGH        // 高准确率
  ACCURACY_LOW         // 低准确率
  STREAK_MAINTAINED    // 保持连续学习
  CHALLENGE_COMPLETED // 完成挑战
  ACHIEVEMENT_UNLOCKED // 解锁成就
  LEVEL_UP            // 升级
  POINTS_EARNED       // 获得积分
  UI_INTERACTION      // UI交互
  THEME_CHANGED       // 主题变更
  CUSTOMIZATION       // 自定义操作
}

// 学习内容类型枚举
enum LearningContentType {
  TEXT                // 文本内容
  IMAGE               // 图像内容
  AUDIO               // 音频内容
  VIDEO               // 视频内容
  INTERACTIVE         // 交互内容
  QUIZ                // 测验内容
}

// 用户行为事件模型 - 用于学习风格分析
model UserBehaviorEvent {
  id        String               @id @default(cuid())
  userId    String
  eventType UserBehaviorEventType  // 事件类型
  contentType LearningContentType? // 内容类型
  categoryId String?              // 内容类别
  timeSpent Int?                 @default(0) // 花费时间（秒）
  accuracy   Float?               @default(0.0) // 准确率（0-1）
  difficulty Int?                 @default(1) // 难度（1-5）
  success    Boolean?             @default(false) // 是否成功
  metadata   Json?                // 额外元数据
  timestamp DateTime              @default(now()) // 事件时间
  
  // 关联关系
  user        User               @relation("UserBehaviorEventsUser", fields: [userId], references: [id], onDelete: Cascade, map: "user_behavior_events_user_id_fkey")
  
  @@map("user_behavior_events")
  @@index([userId, timestamp])
}

// A/B测试相关模型
// A/B测试模型
model ABTest {
 id          String      @id @default(cuid())
 name        String      // 测试名称
 description String      // 测试描述
 status      ABTestStatus @default(DRAFT) // 测试状态
 startDate   DateTime?   // 开始时间
 endDate     DateTime?   // 结束时间
 targetAudience Json?    // 目标受众配置
 createdAt   DateTime    @default(now())
 updatedAt   DateTime    @updatedAt
 
 // 关联关系
 variants    ABTestVariant[]
 metrics     ABTestMetric[]
 results     ABTestResult[]
 userAssignments ABTestUserAssignment[]
 
 @@map("ab_tests")
}

// A/B测试变体模型
model ABTestVariant {
 id          String   @id @default(cuid())
 testId      String
 name        String   // 变体名称
 description String   // 变体描述
 config      Json     // 变体配置
 trafficPercentage Float   @default(50.0) // 流量分配百分比
 isControl   Boolean  @default(false) // 是否为对照组
 createdAt   DateTime @default(now())
 
 // 关联关系
 test        ABTest          @relation(fields: [testId], references: [id], onDelete: Cascade)
 results     ABTestResult[]
 userAssignments ABTestUserAssignment[]
 
 @@map("ab_test_variants")
}

// A/B测试指标模型
model ABTestMetric {
 id          String          @id @default(cuid())
 testId      String
 name        String          // 指标名称
 description String          // 指标描述
 type        ABTestMetricType // 指标类型
 formula     String?         // 计算公式
 unit        String?         // 单位
 isActive    Boolean         @default(true)
 createdAt   DateTime        @default(now())
 
 // 关联关系
 test        ABTest          @relation(fields: [testId], references: [id], onDelete: Cascade)
 results     ABTestResult[]
 
 @@map("ab_test_metrics")
}

// A/B测试结果模型
model ABTestResult {
 id          String   @id @default(cuid())
 testId      String
 variantId   String
 metricId    String
 value       Float    @default(0) // 指标值
 change      Float    @default(0) // 绝对变化
 changePercentage Float @default(0) // 百分比变化
 confidence  Float    @default(0) // 置信度 (0-1)
 significance Boolean  @default(false) // 是否显著
 sampleSize  Int      @default(0) // 样本大小
 createdAt   DateTime @default(now())
 updatedAt   DateTime @updatedAt
 
 // 关联关系
 test        ABTest       @relation(fields: [testId], references: [id], onDelete: Cascade)
 variant     ABTestVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
 metric      ABTestMetric  @relation(fields: [metricId], references: [id], onDelete: Cascade)
 
 @@unique([testId, variantId, metricId])
 @@map("ab_test_results")
}

// A/B测试用户分配模型
model ABTestUserAssignment {
 id          String   @id @default(cuid())
 testId      String
 userId      String
 variantId   String
 assignedAt  DateTime @default(now())
 
 // 关联关系
 test        ABTest       @relation(fields: [testId], references: [id], onDelete: Cascade)
 variant     ABTestVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
 user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
 
 @@unique([testId, userId])
 @@map("ab_test_user_assignments")
}

// A/B测试相关枚举
enum ABTestStatus {
 DRAFT      // 草稿
 ACTIVE     // 活跃
 PAUSED     // 暂停
 COMPLETED  // 完成
 CANCELLED  // 取消
}

enum ABTestMetricType {
 ENGAGEMENT   // 参与度
 RETENTION    // 保留率
 CONVERSION   // 转化率
 REVENUE      // 收入
 SATISFACTION // 满意度
 PERFORMANCE  // 性能
 CUSTOM       // 自定义
}

// A/B测试模板模型
model ABTestTemplate {
  id          String      @id @default(cuid())
  name        String      // 模板名称
  description String      // 模板描述
  category    String      // 模板类别
  variants    Json        // 变体定义
  metrics     Json        // 指标定义
  targetAudience Json?     // 目标受众配置
  isActive    Boolean     @default(true)
  createdBy   String      // 创建者ID
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // 关联关系
  creator     User        @relation("ABTestTemplatesCreator", fields: [createdBy], references: [id])
  
  @@map("ab_test_templates")
}

// A/B测试用户细分模型
model ABSegment {
  id          String      @id @default(cuid())
  name        String      // 细分名称
  description String      // 细分描述
  criteria    Json        // 细分条件
  isActive    Boolean     @default(true)
  createdBy   String      // 创建者ID
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // 关联关系
  creator     User        @relation("ABSegmentsCreator", fields: [createdBy], references: [id])
  segmentUsers ABSegmentUser[]
  
  @@map("ab_segments")
}

// A/B测试细分用户模型
model ABSegmentUser {
  id          String      @id @default(cuid())
  segmentId   String
  userId      String
  addedAt     DateTime    @default(now())
  
  // 关联关系
  segment     ABSegment   @relation(fields: [segmentId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([segmentId, userId])
  @@map("ab_segment_users")
}

// 奖励商店相关模型
// 奖励物品模型
model RewardItem {
  id          String           @id @default(cuid())
  name        String           // 奖励名称
  description String           // 奖励描述
  icon        String?          // 奖励图标
  category    RewardCategory   // 奖励类别
  type        RewardType       // 奖励类型
  price       Int              // 所需积分
  stock       Int              @default(0) // 库存数量，0表示无限制
  isActive    Boolean          @default(true) // 是否上架
  expiresAt   DateTime?        // 过期时间
  metadata    Json?            // 额外元数据（如：兑换后的具体内容、有效期等）
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  // 关联关系
  userRewards UserReward[]
  
  @@map("reward_items")
}

// 用户奖励模型
model UserReward {
  id          String    @id @default(cuid())
  userId      String
  rewardItemId String
  status      RewardStatus @default(PENDING) // 奖励状态
  claimedAt   DateTime? // 领取时间
  expiresAt   DateTime? // 奖励过期时间
  metadata    Json?     // 额外元数据（如：使用状态、激活码等）
  createdAt   DateTime  @default(now())
  
  // 关联关系
  user        User       @relation("UserRewardsUser", fields: [userId], references: [id], onDelete: Cascade)
  rewardItem  RewardItem @relation(fields: [rewardItemId], references: [id], onDelete: Cascade)
  
  @@unique([userId, rewardItemId])
  @@map("user_rewards")
}

// 奖励类别枚举
enum RewardCategory {
  VIRTUAL_GOODS    // 虚拟商品
  PHYSICAL_GOODS   // 实物商品
  DISCOUNT         // 折扣券
  PREMIUM_FEATURE  // 高级功能
  CUSTOMIZATION    // 自定义选项
  BADGE           // 徽章
  EXPERIENCE      // 经验值加成
}

// 奖励类型枚举
enum RewardType {
  ONE_TIME         // 一次性奖励
  RECURRING        // 定期奖励
  PERMANENT        // 永久奖励
  LIMITED          // 限时奖励
}

// 奖励状态枚举
enum RewardStatus {
  PENDING          // 待处理
  COMPLETED        // 已完成
  EXPIRED          // 已过期
  CANCELLED        // 已取消
}

// 个性化配置相关模型
// 个性化配置模型
model PersonalizedConfig {
  id           String   @id @default(cuid())
  userId       String   @unique
  difficulty   Json?    // 难度配置
  notifications Json?   // 通知配置
  theme        Json?    // 主题配置
  preferences  Json?    // 其他偏好设置
  learningStyleAdaptation Json? // 学习风格适配配置
  lastUpdatedAt DateTime @updatedAt
  createdAt    DateTime @default(now())
  
  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
   
  @@map("personalized_configs")
}

// 难度配置枚举
enum DifficultyLevel {
  EASY       // 简单
  MEDIUM     // 中等
  HARD       // 困难
  ADAPTIVE   // 自适应
}

// 通知类型枚举
enum NotificationType {
  REMINDER        // 提醒
  ACHIEVEMENT     // 成就
  CHALLENGE       // 挑战
  STREAK          // 连续学习
  LEVEL_UP        // 升级
  POINTS_EARNED   // 获得积分
  DAILY_SUMMARY   // 每日总结
  WEEKLY_REPORT   // 周报
}

// 通知方式枚举
enum NotificationMethod {
  IN_APP        // 应用内通知
  EMAIL         // 邮件
  PUSH          // 推送通知
  SMS           // 短信
}

// 主题风格枚举
enum ThemeStyle {
  LIGHT          // 浅色主题
  DARK           // 深色主题
  AUTO           // 自动主题
  CUSTOM         // 自定义主题
}

// 学习风格适配策略枚举
enum LearningStyleAdaptationStrategy {
  VISUAL_FOCUS    // 视觉焦点
  AUDITORY_FOCUS  // 听觉焦点
  KINESTHETIC_FOCUS // 动觉焦点
  READING_FOCUS   // 阅读焦点
  BALANCED        // 平衡策略
}

// 社交分享相关模型
// 社交分享记录模型
model SocialShare {
  id          String   @id @default(cuid())
  userId      String
  platform    String   // 分享平台
  contentType String   // 分享内容类型
  contentId   String   // 内容ID
  shareText   String   // 分享文本
  shareImage  String?  // 分享图片URL
  sharedAt    DateTime @default(now()) // 分享时间
  
  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("social_shares")
  @@index([userId, sharedAt])
}

// 新手引导/教程相关模型
// 教程模型
model Tutorial {
 id          String           @id @default(cuid())
 name        String           // 教程名称
 description String           // 教程描述
 category    TutorialCategory  // 教程类别
 audience    TutorialAudience // 目标受众
 difficulty  DifficultyLevel   // 教程难度
 estimatedTime Int            // 预估完成时间（分钟）
 points      Int              @default(0) // 完成获得的积分
 order       Int              @default(0) // 显示顺序
 isActive    Boolean          @default(true) // 是否激活
 tags        String[]         // 标签
 prerequisites Json?          // 前置条件
 steps       TutorialStep[]   // 关联的步骤
 userProgress UserTutorialProgress[] // 用户进度记录
 feedback    TutorialFeedback[] // 用户反馈
 createdAt   DateTime         @default(now())
 updatedAt   DateTime         @updatedAt
 
 @@map("tutorials")
}

// 教程步骤模型
model TutorialStep {
 id          String        @id @default(cuid())
 tutorialId  String        // 关联的教程ID
 title       String        // 步骤标题
 content     String        // 步骤内容
 type        TutorialStepType // 步骤类型
 position    String        // 位置指示器
 target      String?       // 目标元素选择器
 order       Int           // 步骤顺序
 isRequired  Boolean       @default(true) // 是否必须完成
 points      Int           @default(0) // 完成获得的积分
 actions     Json?         // 可执行操作
 metadata    Json?         // 额外元数据
 
 // 关联关系
 tutorial    Tutorial      @relation(fields: [tutorialId], references: [id], onDelete: Cascade)
 userStepProgress UserStepProgress[] // 用户步骤进度记录
 
 @@map("tutorial_steps")
 @@index([tutorialId, order])
}

// 用户教程进度模型
model UserTutorialProgress {
 id          String            @id @default(cuid())
 userId      String            // 用户ID
 tutorialId  String            // 教程ID
 status      TutorialProgressStatus // 进度状态
 currentStep Int               @default(0) // 当前步骤索引
 completedSteps Int            @default(0) // 已完成步骤数
 timeSpent   Int               @default(0) // 花费时间（秒）
 startedAt   DateTime?         // 开始时间
 completedAt DateTime?         // 完成时间
 skippedAt   DateTime?         // 跳过时间
 metadata    Json?             // 额外元数据
 
 // 关联关系
 user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
 tutorial    Tutorial          @relation(fields: [tutorialId], references: [id], onDelete: Cascade)
 stepProgress UserStepProgress[] // 步骤进度记录
 
 @@unique([userId, tutorialId])
 @@map("user_tutorial_progress")
}

// 用户步骤进度模型
model UserStepProgress {
 id          String            @id @default(cuid())
 userProgressId String         // 用户进度ID
 stepId      String            // 步骤ID
 status      StepProgressStatus // 步骤状态
 timeSpent   Int               @default(0) // 花费时间（秒）
 completedAt DateTime?         // 完成时间
 skippedAt   DateTime?         // 跳过时间
 attempts    Int               @default(0) // 尝试次数
 metadata    Json?             // 额外元数据
 
 // 关联关系
 userProgress UserTutorialProgress @relation(fields: [userProgressId], references: [id], onDelete: Cascade)
 step        TutorialStep       @relation(fields: [stepId], references: [id], onDelete: Cascade)
 
 @@unique([userProgressId, stepId])
 @@map("user_step_progress")
}

// 教程反馈模型
model TutorialFeedback {
 id          String          @id @default(cuid())
 userId      String          // 用户ID
 tutorialId  String          // 教程ID
 rating      Int             // 评分 (1-5)
 comment     String?         // 评论
 helpful     Boolean?        // 是否有帮助
 createdAt   DateTime        @default(now())
 
 // 关联关系
 user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
 tutorial    Tutorial        @relation(fields: [tutorialId], references: [id], onDelete: Cascade)
 
 @@unique([userId, tutorialId])
 @@map("tutorial_feedback")
}

// 新手引导相关枚举
enum TutorialCategory {
 BASICS           // 基础功能
 ADVANCED         // 高级功能
 FEATURES         // 特色功能
 ACHIEVEMENTS     // 成就系统
 REWARDS          // 奖励系统
 CHALLENGES       // 挑战系统
}

enum TutorialAudience {
 NEW_USER         // 新用户
 RETURNING_USER   // 回归用户
 POWER_USER       // 高级用户
}

enum TutorialStepType {
 INFO             // 信息展示
 INTERACTION      // 交互操作
 NAVIGATION       // 页面导航
 DEMONSTRATION    // 功能演示
}

enum TutorialProgressStatus {
 NOT_STARTED      // 未开始
 IN_PROGRESS      // 进行中
 COMPLETED        // 已完成
 SKIPPED          // 已跳过
}

enum StepProgressStatus {
 NOT_STARTED      // 未开始
 IN_PROGRESS      // 进行中
 COMPLETED        // 已完成
 SKIPPED          // 已跳过
}